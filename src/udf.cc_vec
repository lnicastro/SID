#include <iostream>
#include <algorithm>

#include <string.h>
#include "udf_dif.hh"

#include <my_global.h>
#include <my_sys.h>
#include <mysql.h>

#include <m_ctype.h>
#include <m_string.h>

#include "udf_utils.hh"

// In the Calpont InfiniDB this is not set
#ifndef NOT_FIXED_DEC
#define NOT_FIXED_DEC                   31
#endif


extern int htmCircleRegion(int depth, double ra, double dec, double radius,
                    vector<unsigned long long int>& flist2,
                    vector<unsigned long long int>& plist2);

//Implement UDFs

C_MODE_START;

  DEFINE_FUNCTION(longlong, HTMidByName);
  DEFINE_FUNCTION(longlong, HTMLookup);
  DEFINE_FUNCTION(longlong, HEALPLookup);

  DEFINE_FUNCTION(double, Sphedist);
  DEFINE_FUNCTION(double, HTMBaryDist);
  DEFINE_FUNCTION(double, HEALPBaryDist);
  DEFINE_FUNCTION(double, HEALPMaxS);

  DEFINE_FUNCTION_CHAR(char*, HTMnameById);
  DEFINE_FUNCTION_CHAR(char*, HTMBary);
  DEFINE_FUNCTION_CHAR(char*, HTMBaryC);
  DEFINE_FUNCTION_CHAR(char*, HEALPBary);
  DEFINE_FUNCTION_CHAR(char*, HEALPBaryC);
  DEFINE_FUNCTION_CHAR(char*, HTMNeighb);
  DEFINE_FUNCTION_CHAR(char*, HTMsNeighb);
  DEFINE_FUNCTION_CHAR(char*, HTMNeighbC);
  DEFINE_FUNCTION_CHAR(char*, HEALPNeighb);
  DEFINE_FUNCTION_CHAR(char*, HEALPNeighbC);

  DEFINE_FUNCTION(longlong, DIFCircle);

  DEFINE_FUNCTION(longlong, DIFRect);
  DEFINE_FUNCTION(longlong, DIFRectv);

  DEFINE_FUNCTION(longlong, DIFNeighbC);
  DEFINE_FUNCTION(longlong, DIFsNeighb);

//my_bool pippo_init(UDF_INIT *initid, UDF_ARGS *args, char *message);
//void pippo_deinit(UDF_INIT *initid);
//char *pippo(UDF_INIT *initid, UDF_ARGS *args, char *result,
               //unsigned long *length, char *is_null, char *error);

//my_bool pluto_init(UDF_INIT *initid, UDF_ARGS *args, char *message);
//void pluto_deinit(UDF_INIT *initid);
//char *pluto(UDF_INIT *initid, UDF_ARGS *args, char *result,
               //unsigned long *length, char *is_null, char *error);

C_MODE_END;


typedef struct myD
{
  int count;
    vector<uint64> *flist;
    vector<uint64> *plist;
};

//--------------------------------------------------------------------

my_bool DIFCircle_init(UDF_INIT* init, UDF_ARGS *args, char *message)
{
  const char* argerr = "DIFCircle(depth INT, Ra_deg DOUBLE, Dec_deg DOUBLE, Rad_arcmin DOUBLE)";

  CHECK_ARG_NUM(4);
  CHECK_ARG_NOT_TYPE(0, STRING_RESULT);
  CHECK_ARG_NOT_TYPE(1, STRING_RESULT);
  CHECK_ARG_NOT_TYPE(2, STRING_RESULT);
  CHECK_ARG_NOT_TYPE(3, STRING_RESULT);

  init->maybe_null = 0;
  init->const_item = 0;

  init->ptr = (char *)malloc(sizeof (myD));

  ((struct myD*)init->ptr)->flist = new vector<uint64>; 
  ((struct myD*)init->ptr)->plist = new vector<uint64>; 
  ((struct myD*)init->ptr)->count = -2;

  return 0;
}


longlong DIFCircle(UDF_INIT *init, UDF_ARGS *args,
                   char *is_null, char* error)
{
  int depth  = IARGS(0);
  double rac = DARGS(1);
  double dec = DARGS(2);
  double rad = DARGS(3);


  struct myD* m = (struct myD*) init->ptr;

  if (m->count++ == -2) {
    htmCircleRegion(depth, rac, dec, rad, *(m->plist),*(m->flist));
    return m->flist->size();
  }

  if (m->count++ == -1)
    return m->plist->size();

  if (m->count++ < m->flist->size())
    return m->flist->at(m->count++);

 return m->plist->at((m->count++) - m->flist->size());
}


void DIFCircledeinit(UDF_INIT *init)
{
 delete ((struct myD*)init->ptr)->flist;
 delete ((struct myD*)init->ptr)->plist;
 free (init->ptr);
 }





/*
my_bool pluto_init(UDF_INIT *init, UDF_ARGS *args, char *message)
{
 const char* argerr = "";


  init->maybe_null = 1;
//  init->max_length = 255;
  init->const_item = 0;

  return 0;
}

char * pluto(UDF_INIT *init, UDF_ARGS *args,
                 char *result, unsigned long *length,
                 char *is_null, char *error)
{

  char* p = CARGS(0);

  struct myD *m = (struct myD*)p;
  *length = 1;
  result = &(m->firstTime);
  return &(m->firstTime);
}


void pluto_deinit(UDF_INIT* init)
{
}
*/
